---


# To prevent entering the password when ansible executes.
- name: Set passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'


# Suricata worker CPUs needs to be isolated from the Linux kernel scheduler.
- name: Isolate CPUs in grub file
  block:

    # Add isolcpus boot parameter to grub file. PS: "isolcpus=" key with no value is ok.
    - name: Modify grub file
      template:  
        src: grub.j2
        dest: /etc/default/grub
      notify:
        - Reboot to apply isolcpus

    # Required after grub file is modified.
    - name: Update grub
      command: update-grub

    # Force all handlers that have been notified to run now.
    # Thus, reboot now of necessary.
    - name: Flush handlers
      meta: flush_handlers


- name: Install packages
  package:
    name:
      - suricata # IDS
      - jq  # Command-line JSON processor
      - ethtool # Query or control network driver and hardware settings
      - build-essential # For compiling Intel driver
      - linux-tools-generic # Installing Perf for testing
      - linux-tools-5.4.0-72-generic # Installing Perf for testing
      - sysstat # For CPU utilization output
      - gawk # GNU awk needed to monitor network_softnet_stat
    state: latest


# We make sure that the Intel i40e driver is present to ensure max performance.
- name: Install Intel i40e kernel module
  block:

    - name: Make sure directory exists
      file:
        path: /opt/i40e
        state: directory
      notify:
        - Install i40e

    - name: Unarchive driver stored locally
      unarchive:
        src: ../files/i40e-2.14.13.tar.gz
        dest: /opt/i40e/
        creates: i40e-2.14.13

    # Force all handlers that have been notified to run now.
    # Thus, install i40e now of necessary.
    - name: Flush handlers
      meta: flush_handlers

- name: Reload i40e driver to reset NIC counters
  block:
    - name: Remove driver
      community.general.modprobe:
        name: i40e
        state: absent

    - name: Add driver
      community.general.modprobe:
        name: i40e
        state: present



- name: Stop irqbalance for high performance optimisation 
  service:
    name: irqbalance
    state: stopped
  when: not default


# The set_irq_affinity script is included with the Intel i40e driver download.
# Pins interrupts from the monitor interface to the Suricata worker threads.
- name: Set irq affinity
  command: "/opt/i40e/i40e-2.14.13/scripts/set_irq_affinity {{threading_worker_cpu_plain}} {{monitor_if}}" # "local" means NUMA 0.
  when: not default


# The NIC (Monitor IF) needs to be configured in order for better performance,
# and to support symmetric RSS.
- name: Configure NIC
  ignore_errors: yes
  when: not default
  block:

    - name: Disable NIC
      command: "ifconfig {{monitor_if}} down"

    - name: Change the number of RSS queues
      command: "ethtool -L {{monitor_if}} combined {{(afpacket_threads_1 + afpacket_threads_2) | int}}"

    - name: Enable receive hashing offload
      command: "ethtool -K {{monitor_if}} rxhash on"

    - name: Enable Rx ntuple filters and actions
      command: "ethtool -K {{monitor_if}} ntuple on"

    - name: Enable NIC
      command: "ifconfig {{monitor_if}} up"

    - name: Allow symmetric hashing by using low entropy toeplitz key
      command: "ethtool -X {{monitor_if}} hkey 6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A:6D:5A equal {{(afpacket_threads_1 + afpacket_threads_2) | int}}"

    - name: Disable RX/TX pause.
      command: "ethtool -A {{monitor_if}} rx off tx off"

    - name: Adaptive control is disabled for lowest possible latency
      command: "ethtool -C {{monitor_if}} adaptive-rx off adaptive-tx off rx-usecs 125" # TODO: test e.g. 150

    - name: Changes the number of ring entries for the Rx ring. # TODO: test
      command: "ethtool -G {{monitor_if}} rx 1024" # buffer størrelse, finnes en maks størrelse men kan teste med mindre

    - name: Make sure the RSS hash function is Toeplitz.
      command: "ethtool -X {{monitor_if}} hfunc toeplitz"

    - name: Let the NIC balance as much as possible # TODO: test sdfn vs sd
      shell: |
        for proto in tcp4 udp4 tcp6 udp6; do
          ethtool -N {{monitor_if}} rx-flow-hash $proto sdfn
        done


# All tasks related to Suricata in this block.
- name: Suricata stuff
  block:

    # This file has no append parameter in suricata.yaml. Manually deletes file. New file will be generated by Suircata.
    - name: Clean suricata.log
      tags:
          - testing
      file:
        path: /var/log/suricata/suricata.log
        state: absent

    # Uses the template to configure Suricata by inserting variables.
    - name: Configure suricata  
      template:  
        src: suricata.yaml.j2  
        dest: /etc/suricata/suricata.yaml 

    # Makes sure that the signatures are up to date.
    - name: Update signatures
      command: suricata-update

    # To make sure that the IDS is restarted with fresh log files etc.
    - name: Restart suricata
      tags:
        - testing
      service:
        name: suricata
        state: restarted
        enabled: yes


# ======================== Testing ======================== #


- name: Testing
  ignore_errors: yes
  tags:
    - testing
  block:

    # Example directory path for test1:
    # results/test1/2021-04-26T08:53:00Z/
    - name: Create timestamped dir for storing results
      file:
        path: "results/{{test_name}}/{{ansible_date_time.iso8601}}"
        state: directory
        mode: "0755"
      register: newdir_res # Use this fact to store results in the right dir.
      delegate_to: localhost
      become: false

    - name: Copy softnet-stat.pl script to remote
      copy:
        src: softnet-stat.pl
        dest: /usr/local/sbin/softnet-stat.pl
        mode: '0755'

    # All Linux commands we use for logging stats are stated in the loop parameter.
    - name: Start commands used for logging stats
      shell: "{{ item }}"
      args:
        executable: /bin/bash
      async: "{{test_seconds * 2 | int}}" # Don't wait for result. Async value longer than command runtime.
      poll: 0 # Don't wait for result
      register: output
      loop:

        # Start mpstat for CPU utilization log
        - "mpstat -P {{cpu_set}} -N 0 10 {{(test_seconds / 10) | int}}"

        # Start mpstat for CPU interrupts log
        - "mpstat -P {{cpu_set}} -I SCPU -I SUM 10 {{(test_seconds / 10) | int}}"

        # Start perf for cache miss stats. PS: --log-fd 1 means to output to stdout and not stderr.
        - "perf stat --log-fd 1 -I 10000 -e LLC-loads,LLC-load-misses,LLC-stores,LLC-prefetches -C {{cpu_set}} sleep {{test_seconds}}"

        # Start pidstat for monitoring Suricata tasks
        - "pidstat -tuw -C 'Suricata|{{monitor_if}}|FM#|FR#|CW|CS|US' 10 {{(test_seconds / 10) | int}}"

        # Start ethtool for monitoring card’s FIFO buffer drops/losses.
        - "for i in {1..{{(test_seconds / 10) | int}}}; do date; ethtool -S {{monitor_if}} | grep -E 'rx_dropped|rx_missed|rx_packets|errors'; echo ''; sleep 10; done"

        # Start softnet-stat.pl for monitoring packet drops at the softirq layer.
        - "perl /usr/local/sbin/softnet-stat.pl --count {{(test_seconds / 10) | int}} --sec 10"

    # Ansible will wait for the set time in order for Suricata to process some data.
    - name: Pause for testing
      pause:
        seconds: "{{test_seconds}}"

    # Stop Suricata in order to get conclusion stats in suricata.log
    - name: Stop suricata
      service:
        name: suricata
        state: stopped

    # We have to wait for async tasks to finish in order to get the outputs.
    - name: Wait for async tasks to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: output_results
      until: output_results.finished
      retries: 100
      delay: 10
      with_items: "{{ output.results }}"
        
    # All async tasks will create a log file with their command as the name.
    - name: Fetch command output logs
      copy:
        content: "{{item.stdout}}"
        dest: "{{newdir_res.path}}/{{item.cmd|regex_replace('[\x2F]', '-')}}.log"
      delegate_to: localhost
      become: no
      with_items: "{{output_results.results}}"
      no_log: True
      # debugger: always

    # suri-stats is a python module used to generate plots from the stats.log file.
    # The "counters" variable can be changed to plot different stats.
    - name: Generate suri-stats plot
      command: "suri-stats -p -c {{counters}} -S -o /tmp/plot.png /var/log/suricata/stats.log"

    - name: Fetch plot
      fetch:
        src: /tmp/plot.png
        dest: "{{newdir_res.path}}/plot.png"
        flat: yes # Override file path name

    - name: Fetch suricata.log
      fetch:
        src: /var/log/suricata/suricata.log
        dest: "{{newdir_res.path}}/suricata.log"
        flat: yes # Override file path name

    - name: Fetch stats.log
      fetch:
        src: /var/log/suricata/stats.log
        dest: "{{newdir_res.path}}/stats.log"
        flat: yes # Override file path name

    # -T for timestamp
    - name: Log dmesg
      block:

        - name: Register dmesg
          command: "dmesg -T"
          register: dmesg
        
        - name: Fetch dmesg
          copy:
            content: "{{dmesg.stdout}}"
            dest: "{{newdir_res.path}}/dmesg.log"
          delegate_to: localhost
          become: no

    - name: Dump all variables
      template:  
        src: dumpall.j2
        dest: "{{newdir_res.path}}/dumpall.txt"
      delegate_to: localhost
      become: false