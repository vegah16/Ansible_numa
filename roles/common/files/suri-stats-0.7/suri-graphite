#!/usr/bin/env python
# Copyright (C) 2013 Eric Leblond <eric@regit.org>
#
# You can copy, redistribute or modify this Program under the terms of
# the GNU General Public License version 3 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# version 3 along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import suricatasc
import socket
import time
import argparse

parser = argparse.ArgumentParser(prog='suri-graphite', description='Export suricata stats to Graphite')
parser.add_argument('-H', '--host', default='localhost', help='Host running Graphite')
parser.add_argument('-P', '--port', default=2003, help='Port of Graphite data socket')
parser.add_argument('-O', '--oneshot', action='store_const', const=True, help='Send one update and exit', default=False)
parser.add_argument('-D', '--delay', default=10, help='Delay between data dump')
parser.add_argument('-r', '--root', default='suricata.perf', help='Prefix of data name in Graphite')
parser.add_argument('socket', help='suricata socket file to connect to',
                    default="/usr/local/var/run/suricata/suricata-command.socket", nargs='?')
parser.add_argument('-v', '--verbose', action='store_const', const=True, help='verbose output', default=False)

args = parser.parse_args()
sc = suricatasc.SuricataSC(args.socket)
sc.connect()

sck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sck.connect((args.host, args.port))

while 1:
    res = sc.send_command("dump-counters")
    res = res['message']
    tnow = int(time.time())
    for thread in res:
        for counter in res[thread]:
            sck.send("%s.%s.%s %s %d\n" % (args.root, thread , counter, res[thread][counter], tnow))
            if args.verbose:
                print "%s.%s.%s %s %d\n" % (args.root, thread , counter, res[thread][counter], tnow)
    if args.oneshot:
        break
    time.sleep(float(args.delay))
